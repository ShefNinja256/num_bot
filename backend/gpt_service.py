import logging
import requests
from openai import OpenAI
from config import OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ ---
def _log_usage(r, label="GPT"):
    try:
        usage = r.usage
        logging.info(
            f"[{label}] Prompt: {usage.prompt_tokens} | "
            f"Completion: {usage.completion_tokens} | "
            f"Total: {usage.total_tokens}"
        )
    except Exception as e:
        logging.warning(f"[{label}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã: {e}")

# --- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ---
def gpt_interpret(numbers: dict) -> str:
    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 20 –ª–µ—Ç. "
        "–°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–∏—Å–µ–ª: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –æ–±—â–∏–π –≤—ã–≤–æ–¥.\n\n"
        f"–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: {numbers['—Å—É–¥—å–±—ã']}\n"
        f"–ß–∏—Å–ª–æ –¥—É—à–∏: {numbers['–¥—É—à–∏']}\n"
        f"–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: {numbers['–ª–∏—á–Ω–æ—Å—Ç–∏']}\n"
        f"–ß–∏—Å–ª–æ –∑—Ä–µ–ª–æ—Å—Ç–∏: {numbers['–∑—Ä–µ–ª–æ—Å—Ç–∏']}\n"
    )

    r = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=650
    )

    _log_usage(r, "Interpret")
    return r.choices[0].message.content

# --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ---
def gpt_compatibility(result: dict) -> str:
    prompt = (
        "–¢—ã ‚Äî –Ω—É–º–µ—Ä–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. "
        "–ù—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π –ø–æ –∏—Ö —á–∏—Å–ª–∞–º.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "- üîÆ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏—Ö —Å–æ—é–∑–∞\n"
        "- ‚ö° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏\n"
        "- üåü –°–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
        "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —Å –ª—ë–≥–∫–æ–π –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.\n\n"
        f"–ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–≥–æ: {result['person1']}\n"
        f"–ß–∏—Å–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ: {result['person2']}\n"
        f"–†–∞–∑–Ω–∏—Ü–∞ –ø–æ —á–∏—Å–ª–∞–º: {result['—Ä–∞–∑–Ω–∏—Ü–∞']}\n"
    )

    r = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=1000
    )

    _log_usage(r, "Compat")
    return r.choices[0].message.content

# --- –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ---
def gpt_natal(payload: dict) -> str:
    # payload: {"date":"DD.MM.YYYY","time":"HH:MM","place":"–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"}
    prompt = (
        "–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∞–π –º—è–≥–∫–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ä–∞–∑–±–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã, —Ä–∞–±–æ—Ç–∞–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–∞–Ω–µ—Ç –∏ –¥–æ–º–æ–≤ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –õ–∏—á–Ω–æ—Å—Ç—å, –ö–∞—Ä—å–µ—Ä–∞/–¥–µ–Ω—å–≥–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –†–µ—Å—É—Ä—Å—ã –∏ —Å–æ–≤–µ—Ç—ã.\n\n"
        f"–î–∞—Ç–∞: {payload.get('date','')}\n"
        f"–í—Ä–µ–º—è: {payload.get('time','')}\n"
        f"–ú–µ—Å—Ç–æ: {payload.get('place','')}\n"
    )

    r = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=750
    )

    _log_usage(r, "Natal")
    return r.choices[0].message.content

# --- –ì–æ—Ä–æ—Å–∫–æ–ø —Å Aztro API ---
period_map = {
    "—Å–µ–≥–æ–¥–Ω—è": "today",
    "–∑–∞–≤—Ç—Ä–∞": "tomorrow"
    # "–Ω–µ–¥–µ–ª—è" –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
}

def gpt_horoscope(payload: dict) -> str:
    sign_map = {
        "–û–≤–µ–Ω": "aries", "–¢–µ–ª–µ—Ü": "taurus", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "gemini", "–†–∞–∫": "cancer",
        "–õ–µ–≤": "leo", "–î–µ–≤–∞": "virgo", "–í–µ—Å—ã": "libra", "–°–∫–æ—Ä–ø–∏–æ–Ω": "scorpio",
        "–°—Ç—Ä–µ–ª–µ—Ü": "sagittarius", "–ö–æ–∑–µ—Ä–æ–≥": "capricorn", "–í–æ–¥–æ–ª–µ–π": "aquarius", "–†—ã–±—ã": "pisces"
    }

    sign = sign_map.get(payload.get("sign"), "aries")
    period = payload.get("period", "—Å–µ–≥–æ–¥–Ω—è")

    if period == "–Ω–µ–¥–µ–ª—è":
        # ‚ö° –¢—Ä—é–∫: –±–µ—Ä—ë–º "—Å–µ–≥–æ–¥–Ω—è", –∞ GPT –ø—Ä–æ—Å–∏–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ –Ω–µ–¥–µ–ª–∏
        resp = requests.post(f"https://aztro.sameerkumar.website/?sign={sign}&day=today")
        if resp.status_code != 200:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."
        raw = resp.json()

        prompt = (
            f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ({payload.get('sign')}):\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {raw.get('description')}\n"
            f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {raw.get('compatibility')}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {raw.get('mood')}\n"
            f"–¶–≤–µ—Ç: {raw.get('color')}\n"
            f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ: {raw.get('lucky_number')}\n"
            f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ –≤—Ä–µ–º—è: {raw.get('lucky_time')}\n\n"
            "–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥. "
            "–†–∞–∑–±–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ü–Ω, –í—Ç, –°—Ä, ...), —É–∫–∞–∑—ã–≤–∞—è –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, "
            "—Ä–∞–±–æ—Ç—É/–¥–µ–Ω—å–≥–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å–æ–≤–µ—Ç."
        )

        r = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=900
        )
        _log_usage(r, "Horoscope-Week")
        return {
            "date": "–Ω–µ–¥–µ–ª—é",
            "interpretation": r.choices[0].message.content
        }

    else:
        # –¥–µ–Ω—å = —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        day_key = period_map.get(period, "today")
        resp = requests.post(f"https://aztro.sameerkumar.website/?sign={sign}&day={day_key}")
        if resp.status_code != 200:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."
        raw = resp.json()

        prompt = (
            f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {payload.get('sign')} ({period}, {raw.get('current_date')}):\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {raw.get('description')}\n"
            f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {raw.get('compatibility')}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {raw.get('mood')}\n"
            f"–¶–≤–µ—Ç: {raw.get('color')}\n"
            f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ: {raw.get('lucky_number')}\n"
            f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ –≤—Ä–µ–º—è: {raw.get('lucky_time')}\n\n"
            "–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚ú® –û–±—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n"
            "üíº –†–∞–±–æ—Ç–∞ –∏ –¥–µ–Ω—å–≥–∏\n"
            "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è\n"
            "üå± –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–µ—Å—É—Ä—Å\n"
            "üåü –°–æ–≤–µ—Ç\n\n"
            "–ü–∏—à–∏ –∂–∏–≤–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."
        )

        r = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=600
        )
        _log_usage(r, "Horoscope")
        return {
            "date": raw.get("current_date"),
            "interpretation": r.choices[0].message.content
        }
