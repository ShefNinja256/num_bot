import openai
from config import OPENAI_API_KEY
import logging

openai.api_key = OPENAI_API_KEY

def _log_usage(r):
    try:
        u = r["usage"]
        logging.info(f"[GPT] prompt={u['prompt_tokens']} | completion={u['completion_tokens']} | total={u['total_tokens']}")
    except Exception:
        pass

def gpt_interpret(numbers: dict) -> str:
    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 20 –ª–µ—Ç. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∏ –ø–æ–Ω—è—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–∏—Å–µ–ª —á–µ–ª–æ–≤–µ–∫–∞.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "1) –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ (—Å—É–¥—å–±—ã, –¥—É—à–∏, –ª–∏—á–Ω–æ—Å—Ç–∏, –∑—Ä–µ–ª–æ—Å—Ç–∏) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü.\n"
        "- –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á–∏—Å–ª–æ.\n"
        "- –î–∞–π —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–ª–∞–Ω—Ç—ã.\n"
        "- –£–∫–∞–∂–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞, –Ω–∞–¥ —á–µ–º —Å—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        "2) –í –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –æ–±—â–∏–π –≤—ã–≤–æ–¥ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞.\n"
        "3) –ü–∏—à–∏ –≤ —Å—Ç–∏–ª–µ –ª—ë–≥–∫–æ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ (–¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –º—É–¥—Ä–æ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π –º–∏—Å—Ç–∏–∫–∏).\n\n"
        f"–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: {numbers['—Å—É–¥—å–±—ã']}\n"
        f"–ß–∏—Å–ª–æ –¥—É—à–∏: {numbers['–¥—É—à–∏']}\n"
        f"–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: {numbers['–ª–∏—á–Ω–æ—Å—Ç–∏']}\n"
        f"–ß–∏—Å–ª–æ –∑—Ä–µ–ª–æ—Å—Ç–∏: {numbers['–∑—Ä–µ–ª–æ—Å—Ç–∏']}\n"
    )

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=600
    )

    usage = response.usage
    print(f"[GPT] Prompt tokens: {usage['prompt_tokens']} | Completion tokens: {usage['completion_tokens']} | Total: {usage['total_tokens']}")

    return response.choices[0].message["content"]


def gpt_compatibility(result: dict) -> str:
    prompt = (
        "–¢—ã ‚Äî –Ω—É–º–µ—Ä–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. "
        "–ù—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π –ø–æ –∏—Ö —á–∏—Å–ª–∞–º.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "- üîÆ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏—Ö —Å–æ—é–∑–∞\n"
        "- ‚ö° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏\n"
        "- üåü –°–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
        "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —Å –ª—ë–≥–∫–æ–π –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.\n\n"
        f"–ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–≥–æ: {result['person1']}\n"
        f"–ß–∏—Å–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ: {result['person2']}\n"
        f"–†–∞–∑–Ω–∏—Ü–∞ –ø–æ —á–∏—Å–ª–∞–º: {result['—Ä–∞–∑–Ω–∏—Ü–∞']}\n"
    )

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=700
    )

    usage = response.usage
    print(f"[GPT] Prompt tokens: {usage['prompt_tokens']} | Completion tokens: {usage['completion_tokens']} | Total: {usage['total_tokens']}")

    return response.choices[0].message["content"]

def gpt_natal(payload: dict) -> str:
    # payload: {"date":"DD.MM.YYYY","time":"HH:MM","place":"–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"}
    prompt = (
        "–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∞–π –º—è–≥–∫–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ä–∞–∑–±–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã, —Ä–∞–±–æ—Ç–∞–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–∞–Ω–µ—Ç –∏ –¥–æ–º–æ–≤ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –õ–∏—á–Ω–æ—Å—Ç—å, –ö–∞—Ä—å–µ—Ä–∞/–¥–µ–Ω—å–≥–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –†–µ—Å—É—Ä—Å—ã –∏ —Å–æ–≤–µ—Ç—ã.\n\n"
        f"–î–∞—Ç–∞: {payload.get('date','')}\n"
        f"–í—Ä–µ–º—è: {payload.get('time','')}\n"
        f"–ú–µ—Å—Ç–æ: {payload.get('place','')}\n"
    )
    r = openai.ChatCompletion.create(model="gpt-4o-mini", messages=[{"role":"user","content":prompt}], max_tokens=750)
    _log_usage(r)
    return r.choices[0].message["content"]

def gpt_horoscope(payload: dict) -> str:
    # payload: {"sign":"–û–≤–µ–Ω", "period":"–Ω–µ–¥–µ–ª—è"|"–º–µ—Å—è—Ü"}
    prompt = (
        "–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –±–µ–∑ —Ñ–∞—Ç–∞–ª–∏–∑–º–∞.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –û–±—â–∏–π —Ñ–æ–Ω, –†–∞–±–æ—Ç–∞/–¥–µ–Ω—å–≥–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –ó–¥–æ—Ä–æ–≤—å–µ/—Ä–µ—Å—É—Ä—Å, –°–æ–≤–µ—Ç.\n"
        f"–ó–Ω–∞–∫: {payload.get('sign','')}, –ø–µ—Ä–∏–æ–¥: {payload.get('period','')}\n"
    )
    r = openai.ChatCompletion.create(model="gpt-4o-mini", messages=[{"role":"user","content":prompt}], max_tokens=500)
    _log_usage(r)
    return r.choices[0].message["content"]
