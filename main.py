import logging
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN
import handlers

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÆ –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë —á–∏—Å–ª–æ")
    kb.add("‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    return kb


@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω—É–º–µ—Ä–æ–ª–æ–≥-–±–æ—Ç üîÆ\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu()
    )


@dp.message_handler(lambda msg: msg.text == "üîÆ –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë —á–∏—Å–ª–æ")
async def ask_date(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@dp.message_handler(lambda msg: msg.text == "‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def ask_dates(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–°–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∂–µ–Ω—â–∏–Ω—ã üë©, –ø–æ—Ç–æ–º –º—É–∂—á–∏–Ω—ã üë®.\n\n"
        "–ü—Ä–∏–º–µ—Ä: 15.09.1992 20.07.1995"
    )


@dp.callback_query_handler(lambda c: c.data == "retry_single")
async def retry_single(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await call.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª


@dp.callback_query_handler(lambda c: c.data == "retry_compat")
async def retry_compat(call: types.CallbackQuery):
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–°–Ω–∞—á–∞–ª–∞ –∂–µ–Ω—â–∏–Ω—É üë©, –ø–æ—Ç–æ–º –º—É–∂—á–∏–Ω—É üë®."
    )
    await call.answer()


@dp.message_handler()
async def router(message: types.Message):
    if " " in message.text.strip():
        await handlers.handle_compat(message)
    else:
        await handlers.handle_date(message)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
